/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.10;

import "./__scribble_ReentrancyUtils.sol";

interface IERC721 {
    function transfer(address, uint) external;

    function transferFrom(address, address, uint) external;
}

contract Auction is __scribble_ReentrancyUtils {
    event Start();

    event End(address highestBidder, uint highestBid);

    event Bid(address indexed sender, uint amount);

    event Withdraw(address indexed bidder, uint amount);

    struct vars1 {
        uint256 old_0;
        address old_1;
    }

    address payable public seller;
    bool public started;
    bool public ended;
    uint public endAt;
    IERC721 public nft;
    uint public nftId;
    uint public highestBid;
    address public highestBidder;
    mapping(address => uint) public bids;

    constructor() {
        seller = payable(msg.sender);
    }

    function start(IERC721 _nft, uint _nftId, uint startingBid) external {
        _original_Auction_start(_nft, _nftId, startingBid);
        unchecked {
            if (!(msg.sender == seller)) {
                emit AssertionFailed("0: only owner can start auction");
                assert(false);
            }
            if (!(started == true)) {
                emit AssertionFailed("1: auction has started");
                assert(false);
            }
            if (!(highestBid == startingBid)) {
                emit AssertionFailed("2: highest bid is the startingbid");
                assert(false);
            }
        }
    }

    function _original_Auction_start(IERC721 _nft, uint _nftId, uint startingBid) private {
        require(!started, "Already started!");
        require(msg.sender == seller, "You are not the owner.");
        highestBid = startingBid;
        nft = _nft;
        nftId = _nftId;
        started = true;
        endAt = block.timestamp + 2 days;
        nft.transferFrom(msg.sender, address(this), nftId);
        emit Start();
    }

    function bid() external payable {
        vars1 memory _v;
        unchecked {
            _v.old_0 = highestBid;
            _v.old_1 = highestBidder;
        }
        _original_Auction_bid();
        unchecked {
            if (!(_v.old_0 == bids[_v.old_1])) {
                emit AssertionFailed("3: bids is updated with old highest bidder");
                assert(false);
            }
        }
    }

    function _original_Auction_bid() private {
        require(started, "Not started.");
        require(block.timestamp < endAt, "Ended!");
        require(msg.value > highestBid);
        if (highestBidder != address(0)) {
            bids[highestBidder] += highestBid;
        }
        highestBid = msg.value;
        highestBidder = msg.sender;
        emit Bid(highestBidder, highestBid);
    }

    function withdraw() external payable {
        _original_Auction_withdraw();
        unchecked {
            if (!(bids[msg.sender] == 0)) {
                emit AssertionFailed("4: withdraw works");
                assert(false);
            }
        }
    }

    function _original_Auction_withdraw() private {
        uint bal = bids[msg.sender];
        bids[msg.sender] = 0;
        (bool sent, ) = payable(msg.sender).call{value: bal}("");
        require(sent, "Could not withdraw");
        emit Withdraw(msg.sender, bal);
    }

    function end() external {
        _original_Auction_end();
        unchecked {
            if (!(ended == true)) {
                emit AssertionFailed("5: auction ended");
                assert(false);
            }
        }
    }

    function _original_Auction_end() private {
        require(started, "You need to start first!");
        require(block.timestamp >= endAt, "Auction is still ongoing!");
        require(!ended, "Auction already ended!");
        if (highestBidder != address(0)) {
            ended = true;
            nft.transfer(highestBidder, nftId);
            (bool sent, ) = seller.call{value: highestBid}("");
            require(sent, "Could not pay seller!");
        } else {
            ended = true;
            nft.transfer(seller, nftId);
        }
        emit End(highestBidder, highestBid);
    }
}